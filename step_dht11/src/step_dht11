#!/usr/bin/env python

import RPi.GPIO as GPIO
import time
import rospy
from std_msgs.msg import Float32


def subscriber():
	sub=rospy.Subscriber('/dht11_temp',Float32,callback_function)

	rospy.spin()

 
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

coil_A_1_pin = 6
coil_A_2_pin = 13
coil_B_1_pin = 19
coil_B_2_pin = 26
 

GPIO.setup(coil_A_1_pin, GPIO.OUT)
GPIO.setup(coil_A_2_pin, GPIO.OUT)
GPIO.setup(coil_B_1_pin, GPIO.OUT)
GPIO.setup(coil_B_2_pin, GPIO.OUT)
 
GPIO.setwarnings(False)
def forward(delay, steps):  
  for i in range(0, steps):
    setStep(1, 0, 1, 0)
    time.sleep(delay)
    setStep(0, 1, 1, 0)
    time.sleep(delay)
    setStep(0, 1, 0, 1)
    time.sleep(delay)
    setStep(1, 0, 0, 1)
    time.sleep(delay)
 
def backwards(delay, steps):  
  for i in range(0, steps):
    setStep(1, 0, 0, 1)
    time.sleep(delay)
    setStep(0, 1, 0, 1)
    time.sleep(delay)
    setStep(0, 1, 1, 0)
    time.sleep(delay)
    setStep(1, 0, 1, 0)
    time.sleep(delay)

def stop(delay, steps):  
  for i in range(0, steps):
    setStep(0, 0, 0, 0)
    time.sleep(delay)
    setStep(0, 0, 0, 0)
    time.sleep(delay)
    setStep(0, 0, 0, 0)
    time.sleep(delay)
    setStep(0, 0, 0, 0)
    time.sleep(delay) 
  
def setStep(w1, w2, w3, w4):
  GPIO.output(coil_A_1_pin, w1)
  GPIO.output(coil_A_2_pin, w2)
  GPIO.output(coil_B_1_pin, w3)
  GPIO.output(coil_B_2_pin, w4)


def callback_function(message):
	rospy.loginfo("temperature : %f"%message.data)
	while True:
		if message.data < 20:
			delay = 9
			steps = 30
			stop(int(delay) / 1000.0,int (steps))
  			forward(int(delay) / 1000.0, int(steps))
  		elif message.data >= 20:		
			delay = 9
			steps = 30
			stop(int(delay) / 1000.0,int (steps))
	  		backwards(int(delay) / 1000.0, int(steps))
		break

if __name__ == "__main__":
	rospy.init_node("step_dht11")
	subscriber()
	

